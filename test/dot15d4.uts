% Regression tests for the Dot15D4 layers

###################
#### SixLoWPAN ####
###################

+ SixLoWPAN tests

= LoWPANIPv6UncompressField

ip6_packet = LoWPANIPv6UncompressField(Reserved=0x1, Type=0x1) / \
    IPv6(src="AAAA:BBBB:CCCC:DDDD:EEEE:FFFF:0000:1111")
ip6_packet.show2()

= Default dissection

# some sample packet extracted
icmp_string = "\x60\x00\x00\x00\x00\x08\x3a\x80\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x11\x22\xff\xfe\xfe\x33\x44\x55"

lowpan_frag_first = "\xc3\x42\x00\x23\x78\xf6\x00\x06\x80\x00\x01\x00\x50\xc4\xf9\x00\x00\x02\x12\x77\x9b\x1a\x9a\x50\x18\x04\xc4\x12\xd5\x00\x00\x3c\x21\x44\x4f\x43\x54\x59\x50\x45\x20\x48\x54\x4d\x4c\x20\x50\x55\x42\x4c\x49\x43\x20\x22\x2d\x2f\x2f\x57\x33\x43\x2f\x2f\x44\x54\x44\x20\x48\x54\x4d\x4c\x20\x34\x2e\x30\x31\x20\x54\x72\x61\x6e\x73\x69\x74\x69\x6f\x6e\x61\x6c\x2f\x2f\x45\x4e\x22\x20\x22\x68\x74\x74\x70"

lowpan_frag_first_packet = SixLoWPAN(lowpan_frag_first)
lowpan_frag_first_packet.show2()

= Frag second dissection

lowpan_frag_second = "\xe3\x42\x00\x23\x10\x3a\x2f\x2f\x77\x77\x77\x2e\x77\x33\x2e\x6f\x72\x67\x2f\x54\x52\x2f\x68\x74\x6d\x6c\x34\x2f\x6c\x6f\x6f\x73\x65\x2e\x64\x74\x64\x22\x3e\x0a\x3c\x68\x74\x6d\x6c\x3e\x3c\x68\x65\x61\x64\x3e\x3c\x74\x69\x74\x6c\x65\x3e\x57\x65\x6c\x63\x6f\x6d\x65\x20\x74\x6f\x20\x74\x68\x65\x20\x43\x6f\x6e\x74\x69\x6b\x69\x2d\x64\x65\x6d\x6f\x20\x73\x65\x72\x76\x65\x72\x21\x3c\x2f\x74\x69\x74\x6c\x65"

lowpan_frag_sec_packet = SixLoWPAN(lowpan_frag_second)
lowpan_frag_sec_packet.show2()

= LoWPAN_IPHC dissection

lowpan_iphc = "\x78\xf6\x00\x06\x80\x00\x01\x00\x50\xc4\xf9\x00\x00\x02\x12\x77\x9b\x1a\x9a\x50\x18\x04\xc4\x12\xd5\x00\x00\x3c\x21\x44\x4f\x43\x54\x59\x50\x45\x20\x48\x54\x4d\x4c\x20\x50\x55\x42\x4c\x49\x43\x20\x22\x2d\x2f\x2f\x57\x33\x43\x2f\x2f\x44\x54\x44\x20\x48\x54\x4d\x4c\x20\x34\x2e\x30\x31\x20\x54\x72\x61\x6e\x73\x69\x74\x69\x6f\x6e\x61\x6c\x2f\x2f\x45\x4e\x22\x20\x22\x68\x74\x74\x70"

lowpan_frag_iphc = LoWPAN_IPHC(lowpan_iphc)
lowpan_frag_iphc.show2()
p = LoWPAN_IPHC(tf=0x0, flowLabel=0x8, _nhField=0x3a, _hopLimit=64)/IPv6(dst="aaaa::11:22ff:fe33:4455", src="aaaa::1")/ICMPv6EchoRequest()
p.show2()
print hexdump(p)

q = LoWPAN_IPHC(tf=0x0)
print hexdump(q)

= Sample packets - dissection

# SAMPLE PACKETSS!!! IEEE 802.15.4 containing   

ieee802_firstfrag = "\x41\xcc\xa3\xcd\xab\x16\x15\x14\xfe\xff\x13\x12\x02\x55\x44\x33\xfe\xff\x22\x11\x02\xc3\x42\x00\x23\x78\xf6\x00\x06\x80\x00\x01\x00\x50\xc4\xf9\x00\x00\x02\x12\x77\x9b\x1a\x9a\x50\x18\x04\xc4\x12\xd5\x00\x00\x3c\x21\x44\x4f\x43\x54\x59\x50\x45\x20\x48\x54\x4d\x4c\x20\x50\x55\x42\x4c\x49\x43\x20\x22\x2d\x2f\x2f\x57\x33\x43\x2f\x2f\x44\x54\x44\x20\x48\x54\x4d\x4c\x20\x34\x2e\x30\x31\x20\x54\x72\x61\x6e\x73\x69\x74\x69\x6f\x6e\x61\x6c\x2f\x2f\x45\x4e\x22\x20\x22\x68\x74\x74\x70\x39\xb5"

ieee = Dot15d4FCS(ieee802_firstfrag)
ieee.show2()
send(ieee)

ieee802_secfrag = "\x41\xcc\x4d\xcd\xab\x55\x44\x33\xfe\xff\x22\x11\x02\x16\x15\x14\xfe\xff\x13\x12\x02\xe2\x39\x00\x17\x10\x69\x76\x65\x0d\x0a\x52\x65\x66\x65\x72\x65\x72\x3a\x20\x68\x74\x74\x70\x3a\x2f\x2f\x5b\x61\x61\x61\x61\x3a\x3a\x31\x31\x3a\x32\x32\x66\x66\x3a\x66\x65\x33\x33\x3a\x34\x34\x35\x35\x5d\x2f\x73\x65\x6e\x73\x6f\x72\x2e\x73\x68\x74\x6d\x6c\x0d\x0a\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x58\x31\x31\x3b\x20\x55\x3b\x20\x4c\x69\x66\xac"

ieee = Dot15d4FCS(ieee802_secfrag)
ieee.show2()

ieee802_iphc = "\x41\xcc\xb5\xcd\xab\x16\x15\x14\xfe\xff\x13\x12\x02\x55\x44\x33\xfe\xff\x22\x11\x02\x78\xf6\x00\x06\x80\x00\x01\x00\x50\xc4\xfa\x00\x00\x01\xf7\x89\xf3\x02\x5f\x50\x18\x04\xc4\x48\x28\x00\x00\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x74\x79\x70\x65\x3a\x20\x74\x65\x78\x74\x2f\x63\x73\x73\x0d\x0a\x0d\x0a\xc1\x16"

ieee = Dot15d4FCS(ieee802_iphc)
ieee.show2()

hexdump(ieee)

= AuxiliarySecurityHeaderIEEE802_15_4

p = AuxiliarySecurityHeaderIEEE802_15_4("\x04\x05\x00\x00\x00")
p.show2()

p = AuxiliarySecurityHeaderIEEE802_15_4("\x18\x05\x00\x00\x00\xff\xee\xdd\xcc\xbb\xaa\x00\x99\x88\x77")
p.show2()

# TEST UDP HEADER COMPRESSION ##############################################
udp_header_compression = "\xc2\x9c\x00\x2a\x7e\xf7\x00\xf0\x22\x3d\x16\x2e\x8e\x60\x10\x03\x00\x00\xaa\xaa\x00\x00\x00\x00\x00\x00\x48\x65\x6c\x6c\x6f\x20\x31\x20\x66\x72\x6f\x6d\x20\x74\x68\x65\x20\x63\x6c\x69\x65\x6e\x74\x2e\x2d\x2e\x2d\x2e\x2d\x20\x30\x20\x33\x34\x35\x36\x37\x38\x39\x20\x31\x20\x33\x34\x35\x36\x37\x38\x39\x20\x32\x20\x33\x34\x35\x36\x37\x38\x39\x20\x33\x20\x33\x34\x35\x36\x37\x38\x39\x20\x34\x20\x33\x34\x35\x36"
#TODO: fix
#p = SixLoWPAN(udp_header_compression)
#p.show2()
#assert p.header_compression == 240
#assert p.udpSourcePort == 8765
#assert p.udpDestinyPort == 5678
#assert p.udpChecksum == 0x8e60

= SixLoWPAN with UDP - dissection

udp = "\xe2\x9c\x00\x2a\x4d\x37\x38\x39\x20\x52\x20\x33\x34\x35\x36\x37\x38\x39\x20\x53\x20\x33\x34\x35\x36\x37\x38\x39\x20\x54\x20\x33\x34\x35\x36\x37\x38\x39\x20\x55\x20\x33\x34\x35\x36\x37\x38\x39\x20\x56\x20\x33\x34\x35\x36\x37\x38"

p = SixLoWPAN(udp)
assert p.datagramSize == 668
assert p.datagramTag == 0x2a
assert p.datagramOffset == 616/8 #TODO: should be multiplied by 8

= SixLoWPAN with UDP - dissection 2

udp = "\xe2\x9c\x00\x2a\x11\x37\x38\x39\x20\x35\x20\x33\x34\x35\x36\x37\x38\x39\x20\x36\x20\x33\x34\x35\x36\x37\x38\x39\x20\x37\x20\x33\x34\x35\x36\x37\x38\x39\x20\x38\x20\x33\x34\x35\x36\x37\x38\x39\x20\x39\x20\x33\x34\x35\x36\x37\x38\x39\x20\x61\x20\x33\x34\x35\x36\x37\x38\x39\x20\x62\x20\x33\x34\x35\x36\x37\x38\x39\x20\x63\x20\x33\x34\x35\x36\x37\x38\x39\x20\x64\x20\x33\x34\x35\x36\x37\x38\x39\x20\x65\x20\x10\x3e"

p = SixLoWPAN(udp)
assert p.datagramSize == 668
assert p.datagramTag == 0x2a
assert p.datagramOffset == 136/8

= SixLoWPAN with UDP - dissection 3

udp = "\xe2\x9c\x00\x2a\x1d\x33\x34\x35\x36\x37\x38\x39\x20\x66\x20\x33\x34\x35\x36\x37\x38\x39\x20\x67\x20\x33\x34\x35\x36\x37\x38\x39\x20\x68\x20\x33\x34\x35\x36\x37\x38\x39\x20\x69\x20\x33\x34\x35\x36\x37\x38\x39\x20\x6a\x20\x33\x34\x35\x36\x37\x38\x39\x20\x6b\x20\x33\x34\x35\x36\x37\x38\x39\x20\x6c\x20\x33\x34\x35\x36\x37\x38\x39\x20\x6d\x20\x33\x34\x35\x36\x37\x38\x39\x20\x6e\x20\x33\x34\x35\x36\x37\x38"

p = SixLoWPAN(udp)
assert p.datagramSize == 668
assert p.datagramTag == 0x2a
assert p.datagramOffset == 232/8
#p.show2()
#print raw(p.payload.payload).encode('hex')

= SixLoWPAN with UDP - dissection 4

udp = "\xe2\x9c\x00\x2a\x29\x39\x20\x6f\x20\x33\x34\x35\x36\x37\x38\x39\x20\x70\x20\x33\x34\x35\x36\x37\x38\x39\x20\x71\x20\x33\x34\x35\x36\x37\x38\x39\x20\x72\x20\x33\x34\x35\x36\x37\x38\x39\x20\x73\x20\x33\x34\x35\x36\x37\x38\x39\x20\x74\x20\x33\x34\x35\x36\x37\x38\x39\x20\x75\x20\x33\x34\x35\x36\x37\x38\x39\x20\x76\x20\x33\x34\x35\x36\x37\x38\x39\x20\x77\x20\x33\x34\x35\x36\x37\x38\x39\x20\x78\x20\x33\x34"

p = SixLoWPAN(udp)
assert p.datagramSize == 668
assert p.datagramTag == 0x2a
assert p.datagramOffset == 328/8

= SixLoWPAN with UDP - dissection 5

udp = "\xe2\x9c\x00\x2a\x35\x35\x36\x37\x38\x39\x20\x79\x20\x33\x34\x35\x36\x37\x38\x39\x20\x7a\x20\x33\x34\x35\x36\x37\x38\x39\x20\x41\x20\x33\x34\x35\x36\x37\x38\x39\x20\x42\x20\x33\x34\x35\x36\x37\x38\x39\x20\x43\x20\x33\x34\x35\x36\x37\x38\x39\x20\x44\x20\x33\x34\x35\x36\x37\x38\x39\x20\x45\x20\x33\x34\x35\x36\x37\x38\x39\x20\x46\x20\x33\x34\x35\x36\x37\x38\x39\x20\x47\x20\x33\x34\x35\x36\x37\x38\x39\x20"

p = SixLoWPAN(udp)
assert p.datagramSize == 668
assert p.datagramTag == 0x2a
assert p.datagramOffset == 424/8
############################################################################

# RPL: unimplemented
#p = SixLoWPAN("\x7b\x3b\x3a\x1a\x9b\x02\xae\x30\x21\x00\x00\xef\x05\x12\x00\x80\x20\x02\x0d\xb8\x00\x00\x00\x00\x00\x00\x00\xff\xfe\x00\x33\x44\x09\x04\x00\x00\x00\x00\x06\x04\x00\x01\xef\xff")
#p.show2()

= Fragmentate packet

ipv6p = "\x60\x00\x00\x00\x02\x11\x06\x80\x20\x02\x0d\xb8\x00\x00\x00\x00\x00\x00\x00\xff\xfe\x00\x00\x01\x20\x02\x0d\xb8\x00\x00\x00\x00\x00\x11\x22\xff\xfe\x33\x44\x55"
tcpp = "\xc4\xf9\x00\x50\x77\x9b\x18\x9d\x00\x00\x01\xa2\x50\x18\x13\x58\x08\x10\x00\x00"
httpp = "\x47\x45\x54\x20\x2f\x20\x48\x54\x54\x50\x2f\x31\x2e\x31\x0d\x0a\x48\x6f\x73\x74\x3a\x20\x5b\x61\x61\x61\x61\x3a\x3a\x31\x31\x3a\x32\x32\x66\x66\x3a\x66\x65\x33\x33\x3a\x34\x34\x35\x35\x5d\x0d\x0a\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x3a\x20\x6b\x65\x65\x70\x2d\x61\x6c\x69\x76\x65\x0d\x0a\x52\x65\x66\x65\x72\x65\x72\x3a\x20\x68\x74\x74\x70\x3a\x2f\x2f\x5b\x61\x61\x61\x61\x3a\x3a\x31\x31\x3a\x32\x32\x66\x66\x3a\x66\x65\x33\x33\x3a\x34\x34\x35\x35\x5d\x2f\x73\x65\x6e\x73\x6f\x72\x2e\x73\x68\x74\x6d\x6c\x0d\x0a\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x58\x31\x31\x3b\x20\x55\x3b\x20\x4c\x69\x6e\x75\x78\x20\x69\x36\x38\x36\x3b\x20\x65\x6e\x2d\x55\x53\x29\x20\x41\x70\x70\x6c\x65\x57\x65\x62\x4b\x69\x74\x2f\x35\x33\x34\x2e\x31\x36\x20\x28\x4b\x48\x54\x4d\x4c\x2c\x20\x6c\x69\x6b\x65\x20\x47\x65\x63\x6b\x6f\x29\x20\x55\x62\x75\x6e\x74\x75\x2f\x31\x30\x2e\x31\x30\x20\x43\x68\x72\x6f\x6d\x69\x75\x6d\x2f\x31\x30\x2e\x30\x2e\x36\x34\x38\x2e\x31\x33\x33\x20\x43\x68\x72\x6f\x6d\x65\x2f\x31\x30\x2e\x30\x2e\x36\x34\x38\x2e\x31\x33\x33\x20\x53\x61\x66\x61\x72\x69\x2f\x35\x33\x34\x2e\x31\x36\x0d\x0a\x41\x63\x63\x65\x70\x74\x3a\x20\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x6d\x6c\x2c\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x68\x74\x6d\x6c\x2b\x78\x6d\x6c\x2c\x74\x65\x78\x74\x2f\x68\x74\x6d\x6c\x3b\x71\x3d\x30\x2e\x39\x2c\x74\x65\x78\x74\x2f\x70\x6c\x61\x69\x6e\x3b\x71\x3d\x30\x2e\x38\x2c\x69\x6d\x61\x67\x65\x2f\x70\x6e\x67\x2c\x2a\x2f\x2a\x3b\x71\x3d\x30\x2e\x35\x0d\x0a\x41\x63\x63\x65\x70\x74\x2d\x45\x6e\x63\x6f\x64\x69\x6e\x67\x3a\x20\x67\x7a\x69\x70\x2c\x64\x65\x66\x6c\x61\x74\x65\x2c\x73\x64\x63\x68\x0d\x0a\x41\x63\x63\x65\x70\x74\x2d\x4c\x61\x6e\x67\x75\x61\x67\x65\x3a\x20\x65\x6e\x2d\x55\x53\x2c\x65\x6e\x3b\x71\x3d\x30\x2e\x38\x0d\x0a\x41\x63\x63\x65\x70\x74\x2d\x43\x68\x61\x72\x73\x65\x74\x3a\x20\x49\x53\x4f\x2d\x38\x38\x35\x39\x2d\x31\x2c\x75\x74\x66\x2d\x38\x3b\x71\x3d\x30\x2e\x37\x2c\x2a\x3b\x71\x3d\x30\x2e\x33\x0d\x0a\x0d\x0a"
ipv6_tcp_http = IPv6(ipv6p + tcpp + httpp)
pkt = fragmentate_sixlowpan(ipv6_tcp_http, 0x17)


# test ping
#p = LoWPAN_IPHC()/IPv6("6000000000000000aaaa000000000000001122fffe334455aaaa00000000000000000000000000018000c4cd00000000".decode('hex'))
#print raw(p).encode('hex')



############################################################################
#TODO: RPL

= Dot15d4FCS - Advanced 1

packet = Dot15d4FCS("\x41\xc8\xad\xcd\xab\xff\xff\x18\x18\x18\x00\x18\x74\x12\x00\x7a\x3b\x3a\x1a\x9b\x00\xd8\xc6\x00\x00\x97\xa2")
packet.show2()
assert packet.sourceAddr == "fe80::212:7418:18:1818"
assert packet.destinyAddr == "ff02::1a"

= Dot15d4FCS - Advanced 2

packet = Dot15d4FCS("\x41\xc8\x83\xcd\xab\xff\xff\x01\x01\x01\x00\x01\x74\x12\x00\x7a\x3b\x3a\x1a\x9b\x01\x2b\xee\x00\x00\x01\x00\x10\x02\x00\x00\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x0e\x00\x08\x0c\x0a\x03\x00\x01\x00\x00\x01\x00\xff\xff\xff\x08\x1e\x40\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xab\x8b")
assert packet.sourceAddr == "fe80::212:7401:1:101"
assert packet.destinyAddr == "ff02::1a"
packet.show2()

= Dot15d4FCS - Advanced 3

packet = Dot15d4FCS("\x41\xc8\x14\xcd\xab\xff\xff\x05\x05\x05\x00\x05\x74\x12\x00\x7a\x3b\x3a\x1a\x9b\x01\x24\xe3\x00\x00\x04\x00\x10\x01\x00\x00\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x0e\x00\x08\x0c\x0a\x03\x00\x01\x00\x00\x01\x00\xff\xff\xff\x08\x1e\x40\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x7b")
assert packet.sourceAddr == "fe80::212:7405:5:505"
assert packet.dst == "ff02::1a"
packet.show2()

#TODO: Mesh Header. DOESNT WORK! (In wireshark it reports, malformed packet)
#packet = SixLoWPAN("\x83\x00\x0a\x00\xff\x0a\x11\x78\x04\x00\x28\x00\x00\x00\x80\x00")
#packet.show2()

= Dot15d4FCS - Advanced 4

#TODO: Neighbour Solicitation (1st packet *417 file)
print "##########################################"
packet = LoWPAN_IPHC("\x7b\x49\x3a\x02\x01\xff\x02\x02\x02\x87\x00\x02\x0b\x00\x00\x00\x00\xfe\x80\x00\x00\x00\x00\x00\x00\x02\x12\x74\x02\x00\x02\x02\x02")
packet.show2()
print packet._nhField, packet.tc_ecn, packet.tc_dscp, packet.__padd, packet.flowlabel
assert packet._nhField == 0x3a
assert packet.src == "::"
assert packet.dst == "ff02::1:ff02:202"
packet.show2()

= Dot15d4FCS - Advanced 5

#TODO: Neighbour Solicitation (2nd packet *417 file)
packet = SixLoWPAN("\x7b\x49\x3a\x02\x01\xff\x01\x01\x01\x87\x00\x57\xe6\x00\x00\x00\x00\xaa\xaa\x00\x00\x00\x00\x00\x00\x02\x12\x74\x01\x00\x01\x01\x01")
assert packet._nhField == 0x3a
assert packet.sourceAddr == "::"
assert packet.destinyAddr == "ff02::1:ff01:101"

#TODO: Neighbour Advertisement (6th packet in *417 file)
#packet = SixLoWPAN("\x7b\x33\x3a\x88\x00\x3c\xb9\x60\x00\x00\x00\xfe\x80\x00\x00\x00\x00\x00\x00\x02\x12\x74\x02\x00\x02\x02\x02\x02\x02\x00\x12\x74\x02\x00\x02\x02\x02\x00\x00\x00\x00\x00\x00")
#packet.show2()
#assert packet.sourceAddr == "fe80::212:7402:2:202"
#assert packet.destinyAddr == "fe80::212:7401:1:101"

= Dot15d4FCS - Advanced 6

#TODO: real life raven
first_frag_get_request = "\xc2\x39\x00\x17\x78\xe7\x00\x06\x80\x00\x01\xc4\xf9\x00\x50\x77\x9b\x18\x9d\x00\x00\x01\xa2\x50\x18\x13\x58\x08\x10\x00\x00\x47\x45\x54\x20\x2f\x20\x48\x54\x54\x50\x2f\x31\x2e\x31\x0d\x0a\x48\x6f\x73\x74\x3a\x20\x5b\x61\x61\x61\x61\x3a\x3a\x31\x31\x3a\x32\x32\x66\x66\x3a\x66\x65\x33\x33\x3a\x34\x34\x35\x35\x5d\x0d\x0a\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x3a\x20\x6b\x65\x65\x70\x2d\x61\x6c"
packet = SixLoWPAN(first_frag_get_request)
packet.show2()
assert packet.datagramSize == 569
assert packet.datagramTag == 0x17

= Dot15d4FCS - Advanced 7 (defragment)

get_request = []
get_request.append(SixLoWPAN("\xc2\x39\x00\x17\x78\xe7\x00\x06\x80\x00\x01\xc4\xf9\x00\x50\x77\x9b\x18\x9d\x00\x00\x01\xa2\x50\x18\x13\x58\x08\x10\x00\x00\x47\x45\x54\x20\x2f\x20\x48\x54\x54\x50\x2f\x31\x2e\x31\x0d\x0a\x48\x6f\x73\x74\x3a\x20\x5b\x61\x61\x61\x61\x3a\x3a\x31\x31\x3a\x32\x32\x66\x66\x3a\x66\x65\x33\x33\x3a\x34\x34\x35\x35\x5d\x0d\x0a\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x3a\x20\x6b\x65\x65\x70\x2d\x61\x6c"))

get_request.append(SixLoWPAN("\xe2\x39\x00\x17\x10\x69\x76\x65\x0d\x0a\x52\x65\x66\x65\x72\x65\x72\x3a\x20\x68\x74\x74\x70\x3a\x2f\x2f\x5b\x61\x61\x61\x61\x3a\x3a\x31\x31\x3a\x32\x32\x66\x66\x3a\x66\x65\x33\x33\x3a\x34\x34\x35\x35\x5d\x2f\x73\x65\x6e\x73\x6f\x72\x2e\x73\x68\x74\x6d\x6c\x0d\x0a\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x58\x31\x31\x3b\x20\x55\x3b\x20\x4c\x69"))
get_request.append(SixLoWPAN("\xe2\x39\x00\x17\x1c\x6e\x75\x78\x20\x69\x36\x38\x36\x3b\x20\x65\x6e\x2d\x55\x53\x29\x20\x41\x70\x70\x6c\x65\x57\x65\x62\x4b\x69\x74\x2f\x35\x33\x34\x2e\x31\x36\x20\x28\x4b\x48\x54\x4d\x4c\x2c\x20\x6c\x69\x6b\x65\x20\x47\x65\x63\x6b\x6f\x29\x20\x55\x62\x75\x6e\x74\x75\x2f\x31\x30\x2e\x31\x30\x20\x43\x68\x72\x6f\x6d\x69\x75\x6d\x2f\x31\x30\x2e\x30\x2e\x36\x34\x38\x2e\x31\x33\x33\x20\x43\x68\x72\x6f\x6d"))
get_request.append(SixLoWPAN("\xe2\x39\x00\x17\x28\x65\x2f\x31\x30\x2e\x30\x2e\x36\x34\x38\x2e\x31\x33\x33\x20\x53\x61\x66\x61\x72\x69\x2f\x35\x33\x34\x2e\x31\x36\x0d\x0a\x41\x63\x63\x65\x70\x74\x3a\x20\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x6d\x6c\x2c\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x68\x74\x6d\x6c\x2b\x78\x6d\x6c\x2c\x74\x65\x78\x74\x2f\x68\x74\x6d\x6c\x3b\x71\x3d\x30\x2e\x39\x2c\x74\x65\x78\x74"))
get_request.append(SixLoWPAN("\xe2\x39\x00\x17\x34\x2f\x70\x6c\x61\x69\x6e\x3b\x71\x3d\x30\x2e\x38\x2c\x69\x6d\x61\x67\x65\x2f\x70\x6e\x67\x2c\x2a\x2f\x2a\x3b\x71\x3d\x30\x2e\x35\x0d\x0a\x41\x63\x63\x65\x70\x74\x2d\x45\x6e\x63\x6f\x64\x69\x6e\x67\x3a\x20\x67\x7a\x69\x70\x2c\x64\x65\x66\x6c\x61\x74\x65\x2c\x73\x64\x63\x68\x0d\x0a\x41\x63\x63\x65\x70\x74\x2d\x4c\x61\x6e\x67\x75\x61\x67\x65\x3a\x20\x65\x6e\x2d\x55\x53\x2c\x65\x6e\x3b"))

#TODO: finish this
packet = defragmentate_sixlowpan(get_request)
packet.show2()

= SixLoWPAN - Using ETH

# It requires the ETH message
lowpan_iphc_header = "\x78\xe7\x00\x06\x80\x00\x01"
packet = SixLoWPAN(lowpan_iphc_header)
assert packet.tf == 0x3
assert packet.nh == 0
assert packet.hlim == 0x0
assert packet.cid == True
assert packet.sac == True
assert packet.sam == 0x2
assert packet.m == 0x0
assert packet.dac == 0x1
assert packet.dam == 0x03
assert packet._nhField == 0x06
assert packet._hopLimit == 128
packet.show2()

= SixLoWPAN - Using ETH 2

# It requires the ETH message
lowpan_iphc_header = "\x78\xf6\x00\x06\x80\x00\x01"
packet = SixLoWPAN(lowpan_iphc_header)
assert packet.tf == 0x3
assert packet.nh == 0
assert packet.hlim == 0x0
assert packet.cid == True
assert packet.sac == True
assert packet.sam == 0x3
assert packet.m == 0x0
assert packet.dac == 0x1
assert packet.dam == 0x02
assert packet._nhField == 0x06
assert packet._hopLimit == 128

= SixLoWPAN - Using ETH 3

lowpan_iphc_header = "\x78\xe7\x00\x06\x80\x00\x01"
packet = SixLoWPAN(lowpan_iphc_header)
assert packet.tf == 0x3
assert packet.nh == 0
assert packet.hlim == 0x0
assert packet.cid == True
assert packet.sac == True
assert packet.sam == 0x2
assert packet.m == 0x0
assert packet.dac == 0x1
assert packet.dam == 0x03
assert packet._nhField == 0x06
assert packet._hopLimit == 128
packet.show2()

= SixLoWPAN - Using ICMP

#ICMP: Neighbour Solicitation
icmp = "\x7b\xf6\x00\x3a\x00\x01\x87\x00\xaa\x66\x00\x00\x00\x00\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x02\x02\x11\x22\xff\xfe\x33\x44\x55\x00\x00\x00\x00\x00\x00"
packet = SixLoWPAN(icmp)
#packet.show2()
assert packet.tf == 0x3
assert packet.nh == 0
assert packet.hlim == 0x3
assert packet.cid == True
assert packet.sac == True
assert packet.sam == 0x3
assert packet.m == False
assert packet.dac == True
assert packet.dam == 0x2
assert packet._nhField == 0x3a

= LoWPAN_IPHC - Extracted packet
icmp = "\x7b\x3b\x3a\x01\x86\x00\xd3\xfd\x80\x00\x00\xc8\x00\x05\x7e\x40\x00\x00\x00\x00\x03\x04\x40\xc0\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x01\x00\x00\x00\x00\x05\x00\x01\x02\x02\x12\x13\xff\xfe\x14\x15\x16\x7b\x66\x6f\x6e\x74\x2d"
packet = LoWPAN_IPHC(icmp)
packet.show2()

#the same message with ethernet header
eth = "\x41\xc8\x49\xcd\xab\xff\xff\x16\x15\x14\xfe\xff\x13\x12\x02\x7b\x3b\x3a\x01\x86\x00\xd3\xfd\x80\x00\x00\xc8\x00\x05\x7e\x40\x00\x00\x00\x00\x03\x04\x40\xc0\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x01\x00\x00\x00\x00\x05\x00\x01\x02\x02\x12\x13\xff\xfe\x14\x15\x16\x7b\x66\x6f\x6e\x74\x2d\xa0\x90"
packet = Dot15d4FCS(eth)
#packet.show2()
assert packet.destinyAddr == "ff02::1"
assert packet.sourceAddr == "fe80::12:13ff:fe14:1516"

= LoWPAN_IPHC - Extracted packet 2

#NOTE: this is not a real package, it's the first fragment from a udp packet
# extracted from 6lowpan-test.pcap
udp = "\x7e\xf7\x00\xf0\x22\x3d\x16\x2e\x8e\x60\x10\x03\x00\x00\xaa\xaa\x00\x00\x00\x00\x00\x00\x48\x65\x6c\x6c\x6f\x20\x31\x20\x66\x72\x6f\x6d\x20\x74\x68\x65\x20\x63\x6c\x69\x65\x6e\x74\x2e\x2d\x2e\x2d\x2e\x2d\x20\x30\x20\x33\x34\x35\x36\x37\x38\x39\x20\x31\x20\x33\x34\x35\x36\x37\x38\x39\x20\x32\x20\x33\x34\x35\x36\x37\x38\x39\x20\x33\x20\x33\x34\x35\x36\x37\x38\x39\x20\x34\x20\x33\x34\x35\x36"
packet = SixLoWPAN(udp)
assert packet.udpSourcePort == 8765
assert packet.udpDestinyPort == 5678
assert packet.udpChecksum == 0x8e60
assert packet.payload.payload.nh == 0x11 # the ipv6 header
assert packet.payload.payload.payload.sport == 8765 #udp decompressed header
assert packet.payload.payload.payload.dport == 5678 #udp decompressed header
assert packet.payload.payload.payload.chksum == 0x8e60 #udp decompressed header
packet.show2()

= SixLoWPAN - Check Traffic Class and Flow Label when TF=0
packet = SixLoWPAN()/LoWPAN_IPHC(tf=0)/IPv6(tc = 12, fl=467)
packet = SixLoWPAN(raw(packet))
assert (packet.tc_ecn << 6) + packet.tc_dscp == 12
assert packet.flowlabel == 467

= SixLoWPAN - Check Traffic Class and Flow Label when TF=1

packet = SixLoWPAN()/LoWPAN_IPHC(tf=1)/IPv6(tc = 12, fl=467)
packet = SixLoWPAN(raw(packet))
assert packet.tc_ecn == 0 and packet.flowlabel == 467

= SixLoWPAN - Check Traffic Class and Flow Label when TF=2

packet = SixLoWPAN()/LoWPAN_IPHC(tf=2)/IPv6(tc = 12, fl=467)
packet = SixLoWPAN(raw(packet))
assert (packet.tc_ecn << 6) + packet.tc_dscp == 12 and packet.flowlabel == 0
packet = SixLoWPAN()/LoWPAN_IPHC(tf=3)/IPv6(tc = 12, fl=467)
packet = SixLoWPAN(raw(packet))
assert (packet.tc_ecn << 6) + packet.tc_dscp == 0 and packet.flowlabel == 0

#TODO: Next Header Test

= SixLoWPAN - Checking the Hop Limit value in the IPv6 packet decompressed
packet = SixLoWPAN()/LoWPAN_IPHC()/IPv6(tc = 12, fl=467, hlim=65)/ICMPv6EchoRequest()
packet = SixLoWPAN(raw(packet))
assert packet.payload.payload.hlim == 65
packet = SixLoWPAN()/LoWPAN_IPHC(hlim=1)/IPv6(tc = 12, fl=467, hlim=65)/ICMPv6EchoRequest()
packet = SixLoWPAN(raw(packet))
assert packet.payload.payload.hlim == 1
packet = SixLoWPAN()/LoWPAN_IPHC(hlim=2)/IPv6(tc = 12, fl=467, hlim=65)/ICMPv6EchoRequest()
packet = SixLoWPAN(raw(packet))
assert packet.payload.payload.hlim == 64
packet = SixLoWPAN()/LoWPAN_IPHC(hlim=3)/IPv6(tc = 12, fl=467, hlim=65)/ICMPv6EchoRequest()
packet = SixLoWPAN(raw(packet))
assert packet.payload.payload.hlim == 255

#TODO: Context Test

= SixLoWPAN - Check Source Address
packet = SixLoWPAN()/LoWPAN_IPHC(sam = 0, sac = 0)/IPv6(hlim=65, src="aaaa::1")/ICMPv6EchoRequest()
packet = SixLoWPAN(raw(packet))
assert packet.payload.payload.src == "::1" # NO CONTEXT
packet = SixLoWPAN()/LoWPAN_IPHC(sam = 2, sac = 0)/IPv6(hlim=65, src="aaaa::1")/ICMPv6EchoRequest()
packet = SixLoWPAN(raw(packet))
assert packet.payload.payload.src == "fe80::ff:fe00:1" # NO CONTEXT

# Check Destiny Address


= Dot15d4FCS - REAL PACKETS
packet = Dot15d4FCS("\x41\xcc\x38\xcd\xab\x55\x44\x33\xfe\xff\x22\x11\x02\x16\x15\x14\xfe\xff\x13\x12\x02\x7a\xe7\x00\x3a\x00\x01\x80\x00\xc4\xcd\x00\x00\x00\x00\x19\xb1")
packet.show2()
ping_id = 0x7cc4
ping_seq = 1
ping_data = "\x77\xaf\x01\x4e\xc4\xb2\x03\x00\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37"

= LoWPAN_IPHC - PING
# echo request
packet1 = SixLoWPAN()/LoWPAN_IPHC(tf=3, nh=0, hlim=2, cid=True)/IPv6(src="aaaa::11:22ff:fe33:4455", dst="aaaa::1")/ICMPv6EchoRequest(id=ping_id,seq=ping_seq, data=ping_data)
packet.show2()

pkt = SixLoWPAN(raw(packet))
assert pkt[LoWPAN_IPHC].tf == 3

= LoWPAN_IPHC - ECHO REPLY
packet2 = SixLoWPAN()/LoWPAN_IPHC(tf=3, nh=0, hlim=2, cid=True)/IPv6(src="aaaa::11:22ff:fe33:4455", dst="aaaa::1")/ICMPv6EchoRequest(id=ping_id,seq=ping_seq, data=ping_data)

# TODO
assert len(raw(packet1)), len(raw(packet2))

= Dot15d4FCS - ROUTER ADVERTISEMENT
p = Dot15d4FCS("\x41\xc8\x58\xcd\xab\xff\xff\x16\x15\x14\xfe\xff\x13\x12\x02\x7b\x3b\x3a\x01\x86\x00\xf7\x2e\x80\x00\x00\xc8\x00\x05\x7e\x40\x00\x00\x00\x00\x03\x04\x40\xc0\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x01\x00\x00\x00\x00\x05\x00\x01\x02\x02\x12\x13\xff\xfe\x14\x15\x16\x6c\x6f\x63\x61\x6c\x00\x3e\x14")
Dot15d4FCS(raw(p)).show2()

p = IPv6("\x60\x00\x00\x00\x00\x48\x3a\xff\xfe\x80\x00\x00\x00\x00\x00\x00\x00\x12\x13\xff\xfe\x14\x15\x16\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x86\x00\xf7\x2e\x80\x00\x00\xc8\x00\x05\x7e\x40\x00\x00\x00\x00\x03\x04\x40\xc0\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x01\x00\x00\x00\x00\x05\x00\x01\x02\x02\x12\x13\xff\xfe\x14\x15\x16\x6c\x6f\x63\x61\x6c\x00")
p.show2()